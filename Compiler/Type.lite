"Compiler" {
    "Antlr4/Runtime"
    "Antlr4/Runtime/Misc"
    "System"

    LiteParser. = "Compiler" 
    Compiler_static. = "Compiler" 
}

LiteLangVisitor : $ (me) {
    .VisitTypeType : (context TypeTypeContext -> v any) {
        obj = ""
        obj = Visit(context.GetChild(0)) str!
        <- obj
    }

    .VisitTypeReference : (context TypeReferenceContext -> v any) {
        obj = "ref "
        ? context.typeNullable() >< nil {
            obj += Visit(context.typeNullable())
        } context.typeNotNull() >< nil {
            obj += Visit(context.typeNotNull())
        }
        <- obj
    }

    .VisitTypeNullable : (context TypeNullableContext -> v any) {
        obj = ""
        obj = Visit(context.typeNotNull()) str!
        obj += "?"
        <- obj
    }

    .VisitTypeArray : (context TypeArrayContext -> v any) {
        obj = ""
        obj += "\{Visit(context.typeType())}[]"
        <- obj
    }

    .VisitTypeList : (context TypeListContext -> v any) {
        obj = ""
        obj += "\{Lst}<\{Visit(context.typeType())}>"
        <- obj
    }

    .VisitTypeSet : (context TypeSetContext -> v any) {
        obj = ""
        obj += "\{Set}<\{Visit(context.typeType())}>"
        <- obj
    }

    .VisitTypeDictionary : (context TypeDictionaryContext -> v any) {
        obj = ""
        obj += "\{Dic}<\{Visit(context.typeType(0))}, \{Visit(context.typeType(1))}>"
        <- obj
    }

    .VisitTypeStack : (context TypeStackContext -> v any) {
        obj = ""
        obj += "\{Stk}<\{Visit(context.typeType())}>"
        <- obj
    }

    .VisitTypeQueue : (context TypeQueueContext -> v any) {
        obj = ""
        obj += "\{Que}<\{Visit(context.typeType())}>"
        <- obj
    }

    .VisitTypePackage : (context TypePackageContext -> v any) {
        obj = ""
        obj += Visit(context.nameSpaceItem())
        ? context.templateCall() >< nil {
            obj += Visit(context.templateCall())
        }
        <- obj
    }

    .VisitTypeFunction : (context TypeFunctionContext -> v any) {
        obj = ""
        in = Visit(context.typeFunctionParameterClause(0)) str!
        out = Visit(context.typeFunctionParameterClause(1)) str!
        ? context.t.Type == Right_Arrow {
            ? out.Length == 0 {
                obj = ? -> in.Length == 0 {
                    "Action"
                } _ {
                    "Action<\{in}>"
                }
            } _ {
                ? out.first_index_of(",") >= 0 {
                    out = "(\{out})"
                }
                ? context.y >< nil {
                    out = "\{IEnum}<\{out}>"
                }
                obj = ? -> in.Length == 0 {
                    "Func<\{out}>"
                } _ {
                    "Func<\{in}, \{out}>"
                }
            }
        } _ {
            ? out.Length == 0 {
                obj = ? -> in.Length == 0 {
                    "Func<\{Task}>"
                } _ {
                    "Func<\{in}, \{Task}>"
                }
            } _ {
                ? context.y >< nil {
                    out = "\{IEnum}<(\{out})>"
                }
                obj = ? -> in.Length == 0 {
                    "Func<\{Task}<\{out}>>"
                } _ {
                    "Func<\{in}, \{Task}<\{out}>>"
                }
            }
        }
        <- obj
    }

    .VisitTypeAny : (context TypeAnyContext -> v any) {
        <- Any
    }

    .VisitTypeFunctionParameterClause : (context TypeFunctionParameterClauseContext -> v any) {
        obj = ""
        @ i = 0 ++ context.typeType().Length-1 {
            p = Visit(context.typeType(i)) str!
            obj += ? -> i == 0 {
                p
            } _ {
                ", " + p
            }
        }
        <- obj
    }

    .VisitTypeBasic : (context TypeBasicContext -> v any) {
        <- ? context.t.Type.. -> TypeI8 {
            I8
        } TypeU8 {
            U8
        } TypeI16 {
            I16
        } TypeU16 {
            U16
        } TypeI32 {
            I32
        } TypeU32 {
            U32
        } TypeI64 {
            I64
        } TypeU64 {
            U64
        } TypeF32 {
            F32
        } TypeF64 {
            F64
        } TypeChr {
            Chr
        } TypeStr {
            Str
        } TypeBool {
            Bool
        } TypeInt {
            Int
        } TypeNum {
            Num
        } TypeByte {
            U8
        } _ {
            Any
        }
    }
}
