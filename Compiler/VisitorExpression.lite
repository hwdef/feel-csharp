"Compiler" {
    "Antlr4/Runtime"
    "Antlr4/Runtime/Misc"
    "System"

    "Compiler" LiteParser.
    "Compiler" Compiler_Static.
}

keywords := []str{
    "abstract", "as", "base", "bool", "break" , "byte", "case" , "catch",
    "char","checked","class","const","continue","decimal","default","delegate","do","double","_",
    "enum","event","explicit","extern","false","finally","fixed","float","for","foreach","goto",
    "?","implicit","in","int","interface","internal","is","lock","long","namespace","new","null",
    "object","operator","out","override","params","private","protected","public","readonly","ref",
    "return","sbyte","sealed","short","sizeof","stackalloc","static","string","struct","switch",
    "this","throw","true","try","typeof","uint","ulong","unchecked","unsafe","ushort","using",
    "virtual","void","volatile","while"
}

TemplateItem -> {
    Template: str
    Contract: str
}

DicEle -> {
    key: str
    value: str
    text: str
}

(base)me: LiteLangVisitor -> {
    VisitVariableStatement(context: VariableStatementContext -> v: any) {
        obj := ""
        r1 := Visit(context.expression(0)):(Result)
        r2 := Visit(context.expression(1)):(Result)
        ? context.typeType() >< nil {
            Type := Visit(context.typeType()):(str)
            obj = ""Type" "r1.text" = "r2.text"" + Terminate + Wrap
        } _ {
            obj = "var "r1.text" = "r2.text"" + Terminate + Wrap
        }
        <- obj
    }

    VisitVariableDeclaredStatement(context: VariableDeclaredStatementContext -> v: any) {
        obj := ""
        Type := Visit(context.typeType()):(str)
        r := Visit(context.expression()):(Result)
        obj = ""Type" "r.text"" + Terminate + Wrap
        <- obj
    }

    VisitAssignStatement(context: AssignStatementContext -> v: any) {
        r1 := Visit(context.expression(0)):(Result)
        r2 := Visit(context.expression(1)):(Result)
        obj := r1.text + Visit(context.assign()) + r2.text + Terminate + Wrap
        <- obj
    }

    VisitAssign(context: AssignContext -> v: any) {
        <- context.op.Text
    }

    VisitExpressionStatement(context: ExpressionStatementContext -> v: any) {
        r := Visit(context.expression()):(Result)
        <- r.text + Terminate + Wrap
    }

    VisitExpression(context: ExpressionContext -> v: any) {
        count := context.ChildCount
        r := Result{}
        ? count == 3 {
            e1 := Visit(context.GetChild(0)):(Result)
            e2 := Visit(context.GetChild(2))
            op := Visit(context.GetChild(1))

            context.GetChild(1) ? :JudgeTypeContext {
                r.data = Bool
                e3 := Visit(context.GetChild(2)):(str)
                op ? "==" {
                    r.text = "("e1.text" is "e3")"
                } "><" {
                    r.text = "!("e1.text" is "e3")"
                }
                <- r
            } :JudgeContext {
                # todo 如果左右不是bool类型值，报错 #
                r.data = Bool
            } :AddContext {
                # todo 如果左右不是number或text类型值，报错 #
                ? e1.data:(str) == Str | e2:(Result).data:(str) == Str {
                    r.data = Str
                }  e1.data:(str) == I32 & e2:(Result).data:(str) == I32 {
                    r.data = I32
                } _ {
                    r.data = F64
                }
            } :MulContext {
                # todo 如果左右不是number类型值，报错 #
                ? e1.data:(str) == I32 & e2:(Result).data:(str) == I32 {
                    r.data = I32
                } _ {
                    r.data = F64
                }
            } :PowContext {
                # todo 如果左右部署number类型，报错 #
                r.data = F64
                op ? "**" {
                    op = "Pow"
                } "//" {
                    op = "Root"
                } "%%" {
                    op = "Log"
                }
                r.text = ""op"("e1.text", "e2:(Result).text")"
                <- r
            }
            r.text = e1.text + op + e2:(Result).text
        } count == 2 {
            r = Visit(context.GetChild(0)):(Result)
            ? context.GetChild(1).GetType() == ?(:TypeConversionContext) {
                e2 := Visit(context.GetChild(1)):(str)
                r.data = e2
                r.text = "(("e2")("r.text"))"
            } context.GetChild(1).GetType() == ?(:CallExpressionContext) {
                e2 := Visit(context.GetChild(1)):(Result)
                r.text = r.text + e2.text
            } context.GetChild(1).GetType() == ?(:CallFuncContext) {
                e2 := Visit(context.GetChild(1)):(Result)
                r.text = r.text + e2.text
            } context.GetChild(1).GetType() == ?(:CallElementContext) {
                e2 := Visit(context.GetChild(1)):(Result)
                r.text = r.text + e2.text
            } _ {
                ? context.op.Type == LiteParser.Bang {
                    r.text = "ref "r.text""
                }  context.op.Type == LiteParser.Question {
                    r.text += "?"
                }
            }
        } count == 1 {
            r = Visit(context.GetChild(0)):(Result)
        }
        <- r
    }

    VisitCallExpression(context: CallExpressionContext -> v: any) {
        r := Visit(context.id()):(Result)
        r.text = "." + r.text
        ? context.templateCall() >< nil {
            r.text += Visit(context.templateCall()):(str)
        }
        ? context.callFunc() >< nil {
            e2 := Visit(context.callFunc()):(Result)
            r.text = r.text + e2.text
        } context.callElement() >< nil {
            e2 := Visit(context.callElement()):(Result)
            r.text = r.text + e2.text
        } context.callChannel() >< nil {
            e2 := Visit(context.callChannel()):(Result)
            r.text = r.text + e2.text
        }
        <- r
    }

    VisitTypeConversion(context: TypeConversionContext -> v: any) {
        <- Visit(context.typeType()):(str)
    }

    VisitCall(context: CallContext -> v: any) {
        <- context.op.Text
    }

    VisitWave(context: WaveContext -> v: any) {
        <- context.op.Text
    }

    VisitJudgeType(context: JudgeTypeContext -> v: any) {
        <- context.op.Text
    }

    VisitBitwise(context: BitwiseContext -> v: any) {
        <- me.Visit(context.GetChild(0)):(str)
    }

    VisitBitwiseAnd(context: BitwiseAndContext -> v: any) {
        <- "&"
    }

    VisitBitwiseOr(context: BitwiseOrContext -> v: any) {
        <- "|"
    }

    VisitBitwiseXor(context: BitwiseXorContext -> v: any) {
        <- "^"
    }

    VisitBitwiseLeftShift(context: BitwiseLeftShiftContext -> v: any) {
        <- "<<"
    }

    VisitBitwiseRightShift(context: BitwiseRightShiftContext -> v: any) {
        <- ">>"
    }

    VisitJudge(context: JudgeContext -> v: any) {
        ? context.op.Text == "><" {
            <- "!="
        } context.op.Text == "&" {
            <- "&&"
        } context.op.Text == "|" {
            <- "||"
        }
        <- context.op.Text
    }

    VisitAdd(context: AddContext -> v: any) {
        <- context.op.Text
    }

    VisitMul(context: MulContext -> v: any) {
        <- context.op.Text
    }

    VisitPow(context: PowContext -> v: any) {
        <- context.op.Text
    }

    VisitPrimaryExpression(context: PrimaryExpressionContext -> v: any) {
        ? context.ChildCount == 1 {
            c := context.GetChild(0)
            ? c == :DataStatementContext {
                <- Visit(context.dataStatement())
            } c == :IdContext {
                <- Visit(context.id())
            } context.t.Type == Discard {
                <- Result{ text = "_", data = "var" }
            }
        } context.ChildCount == 2 {
            id := Visit(context.id()):(Result)
            template := Visit(context.templateCall()):(str)
            <- Result{ text = id.text + template, data = id.text + template }
        }
        r := Visit(context.expression()):(Result)
        <- Result{ text = "(" + r.text + ")", data = r.data }
    }

    VisitExpressionList(context: ExpressionListContext -> v: any) {
        r := Result{}
        obj := ""
        [0 < context.expression().Length] @ i {
            temp := Visit(context.expression(i)):(Result)
            ? i == 0 {
                obj += temp.text
            } _ {
                obj += ", " + temp.text
            }
        }
        r.text = obj
        r.data = "var"
        <- r
    }

    VisitTemplateDefine(context: TemplateDefineContext -> v: any) {
        item := TemplateItem{}
        item.Template += "<"
        [0 < context.templateDefineItem().Length] @ i {
            ? i > 0 {
                item.Template += ","
                ? item.Contract.len() > 0 {
                    item.Contract += ","
                }
            }
            r := Visit(context.templateDefineItem(i)):(TemplateItem)
            item.Template += r.Template
            item.Contract += r.Contract
        }
        item.Template += ">"
        <- item
    }

    VisitTemplateDefineItem(context: TemplateDefineItemContext -> v: any) {
        item := TemplateItem{}
        ? context.id().len() == 1 {
            id1 := context.id(0).GetText()
            item.Template = id1
        } _ {
            id1 := context.id(0).GetText()
            item.Template = id1
            id2 := context.id(1).GetText()
            item.Contract = " where "id1":"id2""
        }
        <- item
    }

    VisitTemplateCall(context: TemplateCallContext -> v: any) {
        obj := ""
        obj += "<"
        [0 < context.typeType().Length] @ i {
            ? i > 0 {
                obj += ","
            }
            r := Visit(context.typeType(i))
            obj += r
        }
        obj += ">"
        <- obj
    }

    VisitCallElement(context: CallElementContext -> v: any) {
        ? context.expression() == nil {
            <- (Result{ text = Visit(context.slice()):(str) })
        }
        r := Visit(context.expression()):(Result)
        r.text = "[" r.text "]"
        <- r
    }

    VisitSlice(context: SliceContext -> v: any) {
        <- Visit(context.GetChild(0)):(str)
    }

    VisitSliceFull(context: SliceFullContext -> v: any) {
        order := ""
        attach := ""
        context.op.Text ? "<=" {
            order = "true"
            attach = "true"
        } "<" {
            order = "true"
        } ">=" {
            order = "false"
            attach = "true"
        } ">" {
            order = "false"
        }
        expr1 := Visit(context.expression(0)):(Result)
        expr2 := Visit(context.expression(1)):(Result)
        <- ".slice("expr1.text", "expr2.text", "order", "attach")"
    }

    VisitSliceStart(context: SliceStartContext -> v: any) {
        order := ""
        attach := ""
        context.op.Text ? "<=" {
            order = "true"
            attach = "true"
        } "<" {
            order = "true"
        } ">=" {
            order = "false"
            attach = "true"
        } ">" {
            order = "false"
        }
        expr := Visit(context.expression()):(Result)
        <- ".slice("expr.text", null, "order", "attach")"
    }

    VisitSliceEnd(context: SliceEndContext -> v: any) {
        order := ""
        attach := "false"
        context.op.Text ? "<=" {
            order = "true"
            attach = "true"
        } "<" {
            order = "true"
        } ">=" {
            order = "false"
            attach = "true"
        } ">" {
            order = "false"
        }
        expr := Visit(context.expression()):(Result)
        <- ".slice(null, "expr.text", "order", "attach")"
    }

    VisitCallFunc(context: CallFuncContext -> v: any) {
        r := Result{data = "var"}
        ? context.tuple() >< nil {
            r.text += Visit(context.tuple()):(Result).text
        } _ {
            r.text += "(" Visit(context.lambda()):(Result).text ")"
        }

        <- r
    }

    VisitCallPkg(context: CallPkgContext -> v: any) {
        r := Result{data = Visit(context.typeType())}
        r.text = "(new "Visit(context.typeType())"()"
        ? context.pkgAssign() >< nil {
            r.text += Visit(context.pkgAssign())
        } context.listAssign() >< nil {
            r.text += Visit(context.listAssign())
        } context.setAssign() >< nil {
            r.text += Visit(context.setAssign())
        } context.dictionaryAssign() >< nil {
            r.text += Visit(context.dictionaryAssign())
        }
        r.text += ")"
        <- r
    }

    VisitCallNew(context: CallNewContext -> v: any) {
        r := Result{data = Visit(context.typeType())}
        param := ""
        ? context.expressionList() >< nil {
            param = Visit(context.expressionList()):(Result).text
        }
        r.text = "(new "Visit(context.typeType())"("param")"
        r.text += ")"
        <- r
    }

    VisitPkgAssign(context: PkgAssignContext -> v: any) {
        obj := ""
        obj += "{"
        [0 < context.pkgAssignElement().Length] @ i {
            ? i == 0 {
                obj += Visit(context.pkgAssignElement(i))
            } _ {
                obj += "," + Visit(context.pkgAssignElement(i))
            }
        }
        obj += "}"
        <- obj
    }

    VisitListAssign(context: ListAssignContext -> v: any) {
        obj := ""
        obj += "{"
        [0 < context.expression().Length] @ i {
            r := Visit(context.expression(i)):(Result)
            ? i == 0 {
                obj += r.text
            } _ {
                obj += "," + r.text
            }
        }
        obj += "}"
        <- obj
    }

    VisitSetAssign(context: SetAssignContext -> v: any) {
        obj := ""
        obj += "{"
        [0 < context.expression().Length] @ i {
            r := Visit(context.expression(i)):(Result)
            ? i == 0 {
                obj += r.text
            } _ {
                obj += "," + r.text
            }
        }
        obj += "}"
        <- obj
    }

    VisitDictionaryAssign(context: DictionaryAssignContext -> v: any) {
        obj := ""
        obj += "{"
        [0 < context.dictionaryElement().Length] @ i {
            r := Visit(context.dictionaryElement(i)):(DicEle)
            ? i == 0 {
                obj += r.text
            } _ {
                obj += "," + r.text
            }
        }
        obj += "}"
        <- obj
    }

    VisitPkgAssignElement(context: PkgAssignElementContext -> v: any) {
        obj := ""
        obj += Visit(context.name()) + " = " + Visit(context.expression()):(Result).text
        <- obj
    }

    VisitPkgAnonymous(context: PkgAnonymousContext -> v: any) {
        <- Result{
            data = "var",
            text = "new" + Visit(context.pkgAnonymousAssign()):(str)
        }
    }

    VisitPkgAnonymousAssign(context: PkgAnonymousAssignContext -> v: any) {
        obj := ""
        obj += "{"
        [0 < context.pkgAnonymousAssignElement().Length] @ i {
            ? i == 0 {
                obj += Visit(context.pkgAnonymousAssignElement(i))
            } _ {
                obj += "," + Visit(context.pkgAnonymousAssignElement(i))
            }
        }
        obj += "}"
        <- obj
    }

    VisitPkgAnonymousAssignElement(context: PkgAnonymousAssignElementContext -> v: any) {
        obj := ""
        obj += Visit(context.name()) + " = " + Visit(context.expression()):(Result).text
        <- obj
    }

    VisitCallAwait(context: CallAwaitContext -> v: any) {
        r := Result{}
        expr := Visit(context.expression()):(Result)
        r.data = "var"
        r.text = "await " + expr.text
        <- r
    }

    VisitList(context: ListContext -> v: any) {
        type := "object"
        result := Result{}
        [0 < context.expression().Length] @ i {
            r := Visit(context.expression(i)):(Result)
            ? i == 0 {
                type = r.data:(str)
                result.text += r.text
            } _ {
                ? type >< r.data:(str) {
                    type = "object"
                }
                result.text += "," + r.text
            }
        }
        result.data = "list<"type">"
        result.text = "(new "result.data"(){ "result.text" })"
        <- result
    }

    VisitSet(context: SetContext -> v: any) {
        type := "object"
        result := Result{}
        [0 < context.expression().Length] @ i {
            r := Visit(context.expression(i)):(Result)
            ? i == 0 {
                type = r.data:(str)
                result.text += r.text
            } _ {
                ? type >< r.data:(str) {
                    type = "object"
                }
                result.text += "," + r.text
            }
        }
        result.data = "hashset<"type">"
        result.text = "(new "result.data"(){ "result.text" })"
        <- result
    }

    VisitDictionary(context: DictionaryContext -> v: any) {
        key := Any
        value := Any
        result := Result{}
        [0 < context.dictionaryElement().Length] @ i {
            r := Visit(context.dictionaryElement(i)):(DicEle)
            ? i == 0 {
                key = r.key
                value = r.value
                result.text += r.text
            } _ {
                ? key >< r.key {
                    key = Any
                }
                ? value >< r.value {
                    value = Any
                }
                result.text += "," + r.text
            }
        }
        type := key + "," + value
        result.data = "dictionary<"type">"
        result.text = "(new "result.data"(){ "result.text" })"
        <- result
    }

    VisitDictionaryElement(context: DictionaryElementContext -> v: any) {
        r1 := Visit(context.expression(0)):(Result)
        r2 := Visit(context.expression(1)):(Result)
        result := DicEle{
            key = r1.data:(str),
            value = r2.data:(str),
            text = "{" + r1.text + "," + r2.text + "}"
        }
        <- result
    }

    VisitStringExpression(context: StringExpressionContext -> v: any) {
        text := "(new System.Text.StringBuilder("context.TextLiteral().GetText()")"
        context.stringExpressionElement() @ item {
            text += Visit(item)
        }
        text += ").to_str()"
        <- Result{
            data = Str,
            text = text
        }
    }

    VisitStringExpressionElement(context: StringExpressionElementContext -> v: any) {
        r := Visit(context.expression()):(Result)
        text := context.TextLiteral().GetText()
        <- ".Append("r.text").Append("text")"
    }

    VisitDataStatement(context: DataStatementContext -> v: any) {
        r := Result{}
        ? context.nilExpr() >< nil {
            r.data = Any
            r.text = "null"
        } context.floatExpr() >< nil {
            r.data = F64
            r.text = Visit(context.floatExpr()):(str)
        } context.integerExpr() >< nil {
            r.data = I32
            r.text = Visit(context.integerExpr()):(str)
        } context.t.Type == TextLiteral {
            r.data = Str
            r.text = context.TextLiteral().GetText()
        } context.t.Type == LiteParser.CharLiteral {
            r.data = Chr
            r.text = context.CharLiteral().GetText()
        } context.t.Type == LiteParser.TrueLiteral {
            r.data = Bool
            r.text = T
        } context.t.Type == LiteParser.FalseLiteral {
            r.data = Bool
            r.text = F
        }
        <- r
    }

    VisitFloatExpr(context: FloatExprContext -> v: any) {
        number := ""
        number += Visit(context.integerExpr(0)) + "." + Visit(context.integerExpr(1))
        <- number
    }

    VisitIntegerExpr(context: IntegerExprContext -> v: any) {
        number := ""
        number += context.NumberLiteral().GetText()
        <- number
    }

    VisitFunctionExpression(context: FunctionExpressionContext -> v: any) {
        r := Result{}
        # 异步 #
        ? context.t.Type == Right_Flow {
            r.text += " async "
        }
        r.text += Visit(context.parameterClauseIn()) + " => " + BlockLeft + Wrap
        r.text += ProcessFunctionSupport(context.functionSupportStatement())
        r.text += BlockRight + Wrap
        r.data = "var"
        <- r
    }

    VisitLambda(context: LambdaContext -> v: any) {
        r := Result{data = "var"}
        # 异步 #
        ? context.t.Type == Right_Flow {
            r.text += "async "
        }
        r.text += "("
        ? context.lambdaIn() >< nil {
            r.text += Visit(context.lambdaIn())
        }
        r.text += ")"
        r.text += "=>"

        ? context.expressionList() >< nil {
            r.text += Visit(context.expressionList()):(Result).text
        } _ {
            r.text += "{" + ProcessFunctionSupport(context.functionSupportStatement()) + "}"
        }

        <- r
    }

    VisitLambdaIn(context: LambdaInContext -> v: any) {
        obj := ""
        [0 < context.id().Length] @ i {
            r := Visit(context.id(i)):(Result)
            ? i == 0 {
                obj += r.text
            } _ {
                obj += ", " + r.text
            }
        }
        <- obj
    }

    VisitPlusMinus(context: PlusMinusContext -> v: any) {
        r := Result{}
        expr := Visit(context.expression()):(Result)
        op := Visit(context.add())
        r.data = expr.data
        r.text = op + expr.text
        <- r
    }

    VisitNegate(context: NegateContext -> v: any) {
        r := Result{}
        expr := Visit(context.expression()):(Result)
        r.data = expr.data
        r.text = "!" + expr.text
        <- r
    }

    VisitBitwiseNotExpression(context: BitwiseNotExpressionContext -> v: any) {
        r := Result{}
        expr := Visit(context.expression()):(Result)
        r.data = expr.data
        r.text = "~" + expr.text
        <- r
    }
}
