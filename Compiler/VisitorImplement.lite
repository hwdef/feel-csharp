"Compiler" {
    "Antlr4/Runtime"
    "Antlr4/Runtime/Misc"
    "System"

    "Compiler" LiteParser.
    "Compiler" Compiler_static.
}

(base)me LiteLangVisitor -> { 
    VisitImplementStatement(context ImplementStatementContext -> v any) {
        Self = Visit(context.parameterClauseSelf()).(Parameter)
        me.selfID = Self.id
        isVirtual = ""
        obj = ""
        extends = ""
        ? context.typeType() >< nil {
            extends += ":" + Visit(context.typeType())
        }
        obj += ""Self.permission" partial class "Self.type + extends + BlockLeft + Wrap""
        item @ context.implementSupportStatement() {
            obj += Visit(item)
        }
        obj += BlockRight + Wrap
        me.selfID = ""
        <- obj
    }

    VisitImplementFunctionStatement(context ImplementFunctionStatementContext -> v any) {
        id = Visit(context.id()).(Result)
        isVirtual = ""
        ? id.isVirtual {
            isVirtual = " virtual "
        }
        obj = ""
        # 异步 #
        obj += ""id.permission" "
        ? context.t.Type == Right_Flow {
            pout = Visit(context.parameterClauseOut()).(str)
            ? pout >< "void" {
                pout = ""Task"<"pout">"
            } _ {
                pout = Task
            }
            obj += ""isVirtual" async "pout" "id.text""
        } _ {
            obj += ""isVirtual" " Visit(context.parameterClauseOut())" "id.text""
        }
        # 泛型 #
        templateContract = ""
        ? context.templateDefine() >< nil {
            template = Visit(context.templateDefine()).(TemplateItem)
            obj += template.Template
            templateContract = template.Contract
        }
        me.add_current_set()
        obj += Visit(context.parameterClauseIn()) + templateContract + Wrap + BlockLeft + Wrap
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight + Wrap
        <- obj
    }

    VisitImplementControlStatement(context ImplementControlStatementContext -> v any) {
        r1 = Visit(context.id()).(Result)
        isMutable = true # r1.isVirtual #
        isVirtual = ""
        ? r1.isVirtual {
            isVirtual = " virtual "
        }
        typ = ""
        typ = Visit(context.typeType()).(str)
        obj = ""
        ? context.annotationSupport() >< nil {
            obj += Visit(context.annotationSupport())
        }
        obj += ""r1.permission" "isVirtual" "typ" "r1.text""BlockLeft""
        ? context.expression() >< nil {
            expr = me.Visit(context.expression()).(Result)
            obj += "get{return "expr.text"; }set{"expr.text"=value;}"
        } _ {
            item @ context.packageControlSubStatement() {
                temp = Visit(item).(Result)
                obj += temp.text
            }
        }
        obj += BlockRight + Wrap
        <- obj
    }

    VisitOverrideStatement(context OverrideStatementContext -> v any) {
        Self = Visit(context.parameterClauseSelf()).(Parameter)
        me.selfID = Self.id
        me.superID = Visit(context.id()).(Result).text
        obj = ""
        obj += ""Self.permission" partial class "Self.type""BlockLeft + Wrap""
        item @ context.overrideSupportStatement() {
            obj += Visit(item)
        }
        obj += BlockRight + Wrap
        me.selfID = ""
        me.superID = ""
        <- obj
    }

    VisitOverrideFunctionStatement(context OverrideFunctionStatementContext -> v any) {
        id = Visit(context.id()).(Result)
        isVirtual = " override "
        obj = ""
        # 异步 #
        ? context.n >< nil {
            obj += "protected "
        } _ {
            obj += ""id.permission" "
        }
        ? context.t.Type == Right_Flow {
            pout = Visit(context.parameterClauseOut()).(str)
            ? pout >< "void" {
                pout = ""Task"<"pout">"
            } _ {
                pout = Task
            }
            obj += ""isVirtual" async "pout" "id.text""
        } _ {
            obj += ""isVirtual" " Visit(context.parameterClauseOut())" "id.text""
        }
        # 泛型 #
        templateContract = ""
        ? context.templateDefine() >< nil {
            template = Visit(context.templateDefine()).(TemplateItem)
            obj += template.Template
            templateContract = template.Contract
        }
        me.add_current_set()
        obj += Visit(context.parameterClauseIn()) + templateContract + Wrap + BlockLeft + Wrap
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight + Wrap
        <- obj
    }

    VisitOverrideControlStatement(context OverrideControlStatementContext -> v any) {
        r1 = Visit(context.id()).(Result)
        isMutable = true # r1.isVirtual #
        isVirtual = " override "
        typ = ""
        ? context.typeType() >< nil {
            typ = Visit(context.typeType()).(str)
        }
        obj = ""
        ? context.annotationSupport() >< nil {
            obj += Visit(context.annotationSupport())
        }
        obj += ""r1.permission" "isVirtual" "typ" "r1.text""BlockLeft""
        item @ context.packageControlSubStatement() {
            temp = Visit(item).(Result)
            obj += temp.text
        }
        obj += BlockRight + Wrap
        <- obj
    }
}
