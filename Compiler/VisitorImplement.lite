"Compiler" {
    "Antlr4/Runtime"
    "Antlr4/Runtime/Misc"
    "System"

    "Compiler" LiteParser.
    "Compiler" Compiler_Static.
}

(base)me: LiteLangVisitor -> { 
    VisitImplementStatement(context: ImplementStatementContext -> v: Any) {
        Self := Visit(context.parameterClauseSelf()):(Parameter)
        selfID = Self.id
        isVirtual := ""
        obj := ""
        extends := ""
        ? context.typeType() >< Nil {
            extends += ":" + Visit(context.typeType())
        }
        obj += ""Self.permission" partial class "Self.type + extends + BlockLeft + Wrap""
        context.implementSupportStatement() @ item {
            obj += Visit(item)
        }
        obj += BlockRight + Wrap
        selfID = ""
        <- obj
    }

    VisitImplementFunctionStatement(context: ImplementFunctionStatementContext -> v: Any) {
        id := Visit(context.id()):(Result)
        isVirtual := ""
        ? id.isVirtual {
            isVirtual = " virtual "
        }
        obj := ""
        # 异步 #
        obj += ""id.permission" "
        ? context.t.Type == Right_Flow {
            pout := Visit(context.parameterClauseOut()):(Str)
            ? pout >< "void" {
                pout = ""Task"<"pout">"
            } _ {
                pout = Task
            }
            obj += ""isVirtual" async "pout" "id.text""
        } _ {
            obj += ""isVirtual" " Visit(context.parameterClauseOut())" "id.text""
        }
        # 泛型 #
        templateContract := ""
        ? context.templateDefine() >< Nil {
            template := Visit(context.templateDefine()):(TemplateItem)
            obj += template.Template
            templateContract = template.Contract
        }
        obj += Visit(context.parameterClauseIn()) + templateContract + Wrap + BlockLeft + Wrap
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        obj += BlockRight + Wrap
        <- obj
    }

    VisitImplementControlStatement(context: ImplementControlStatementContext -> v: Any) {
        r1 := Visit(context.id()):(Result)
        isMutable := True # r1.isVirtual #
        isVirtual := ""
        ? r1.isVirtual {
            isVirtual = " virtual "
        }
        typ := ""
        typ = Visit(context.typeType()):(Str)
        obj := ""
        ? context.annotationSupport() >< Nil {
            obj += Visit(context.annotationSupport())
        }
        obj += ""r1.permission" "isVirtual" "typ" "r1.text""BlockLeft""
        ? context.expression() >< Nil {
            expr := me.Visit(context.expression()):(Result)
            obj += "get{return "expr.text"; }set{"expr.text"=value;}"
        } _ {
            context.packageControlSubStatement() @ item {
                temp := Visit(item):(Result)
                obj += temp.text
            }
        }
        obj += BlockRight + Wrap
        <- obj
    }

    VisitOverrideStatement(context: OverrideStatementContext -> v: Any) {
        Self := Visit(context.parameterClauseSelf()):(Parameter)
        selfID = Self.id
        superID = Visit(context.id()):(Result).text
        obj := ""
        obj += ""Self.permission" partial class "Self.type""BlockLeft + Wrap""
        context.overrideSupportStatement() @ item {
            obj += Visit(item)
        }
        obj += BlockRight + Wrap
        selfID = ""
        superID = ""
        <- obj
    }

    VisitOverrideFunctionStatement(context: OverrideFunctionStatementContext -> v: Any) {
        id := Visit(context.id()):(Result)
        isVirtual := " override "
        obj := ""
        # 异步 #
        ? context.n >< Nil {
            obj += "protected "
        } _ {
            obj += ""id.permission" "
        }
        ? context.t.Type == Right_Flow {
            pout := Visit(context.parameterClauseOut()):(Str)
            ? pout >< "void" {
                pout = ""Task"<"pout">"
            } _ {
                pout = Task
            }
            obj += ""isVirtual" async "pout" "id.text""
        } _ {
            obj += ""isVirtual" " Visit(context.parameterClauseOut())" "id.text""
        }
        # 泛型 #
        templateContract := ""
        ? context.templateDefine() >< Nil {
            template := Visit(context.templateDefine()):(TemplateItem)
            obj += template.Template
            templateContract = template.Contract
        }
        obj += Visit(context.parameterClauseIn()) + templateContract + Wrap + BlockLeft + Wrap
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        obj += BlockRight + Wrap
        <- obj
    }

    VisitOverrideControlStatement(context: OverrideControlStatementContext -> v: Any) {
        r1 := Visit(context.id()):(Result)
        isMutable := True # r1.isVirtual #
        isVirtual := " override "
        typ := ""
        ? context.typeType() >< Nil {
            typ = Visit(context.typeType()):(Str)
        }
        obj := ""
        ? context.annotationSupport() >< Nil {
            obj += Visit(context.annotationSupport())
        }
        obj += ""r1.permission" "isVirtual" "typ" "r1.text""BlockLeft""
        context.packageControlSubStatement() @ item {
            temp := Visit(item):(Result)
            obj += temp.text
        }
        obj += BlockRight + Wrap
        <- obj
    }
}
