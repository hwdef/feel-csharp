"Compiler" {
    "Antlr4/Runtime"
    "Antlr4/Runtime/Misc"
    "System"

    "Compiler" LiteParser.
    "Compiler" Compiler_Static.
}

Terminate :: ";"
Wrap :: "\r\n"

Any :: "object"
Int :: "int"
Num :: "double"
I8 :: "sbyte"
I16 :: "short"
I32 :: "int"
I64 :: "long"

U8 :: "byte"
U16 :: "ushort"
U32 :: "uint"
U64 :: "ulong"

F32 :: "float"
F64 :: "double"

Bool :: "bool"
T :: "true"
F :: "false"

Chr :: "char"
Str :: "string"
Lst :: "list"
Set :: "hashset"
Dic :: "dictionary"

BlockLeft :: "{"
BlockRight :: "}"

Task :: "System.Threading.Tasks.Task"

Result -> {
    data: any
    text: str
    permission: str
    isVirtual: bool
}

LiteLangVisitor -> {
    :LiteParserBaseVisitor<any> 

    selfID := ""
    superID := ""
    setID := ""
}
(base)me: LiteLangVisitor -> {
    VisitProgram(context: ProgramContext -> v: any) {
        StatementList := context.statement()
        Result := ""
        StatementList @ item {
            Result += VisitStatement(item)
        }
        <- Result
    }

    VisitId(context: IdContext -> v: any) {
        r := Result{data = "var"}
        first := Visit(context.GetChild(0)):(Result)
        r.permission = first.permission
        r.text = first.text
        r.isVirtual = first.isVirtual
        ? context.ChildCount >= 2 {
            [1 < context.ChildCount] @ i {
                other := Visit(context.GetChild(i)):(Result)
                r.text += "_"other.text""
            }
        }

        ? keywords.Exists({t -> t == r.text}) {
            r.text = "@"r.text""
        }
        ? r.text == selfID {
            r.text = "this"
        } r.text == superID {
            r.text = "base"
        } r.text == setID {
            r.text = "value"
        }
        <- r
    }

    VisitIdItem(context: IdItemContext -> v: any) {
        r := Result{data = "var"}
        ? context.typeBasic() >< nil {
            r.permission = "public"
            r.text += context.typeBasic().GetText()
            r.isVirtual = true
        } context.typeAny() >< nil {
            r.permission = "public"
            r.text += context.typeAny().GetText()
            r.isVirtual = true
        } context.linqKeyword() >< nil {
            r.permission = "public"
            r.text += Visit(context.linqKeyword())
            r.isVirtual = true
        } context.op.Type == IDPublic {
            r.permission = "public"
            r.text += context.op.Text
            r.isVirtual = true
        } context.op.Type == IDPrivate {
            r.permission = "protected"
            r.text += context.op.Text
            r.isVirtual = true
        }
        <- r
    }

    VisitBoolExpr(context: BoolExprContext -> v: any) {
        r := Result{}
        ? context.t.Type == TrueLiteral {
            r.data = Bool
            r.text = T
        } context.t.Type == FalseLiteral {
            r.data = Bool
            r.text = F
        }
        <- r
    }

    VisitAnnotationSupport(context: AnnotationSupportContext -> v: any) {
        <- Visit(context.annotation()):(str)
    }

    VisitAnnotation(context: AnnotationContext -> v: any) {
        obj := ""
        id := ""
        ? context.id() >< nil {
            id = ""Visit(context.id()):(Result).text":"
        }

        r := Visit(context.annotationList()):(str)
        obj += "[" id "" r "]"
        <- obj
    }

    VisitAnnotationList(context: AnnotationListContext -> v: any) {
        obj := ""
        [0 < context.annotationItem().Length] @ i {
            ? i > 0 {
                obj += "," Visit(context.annotationItem(i)) ""
            } _ {
                obj += Visit(context.annotationItem(i))
            }
        }
        <- obj
    }

    VisitAnnotationItem(context: AnnotationItemContext -> v: any) {
        obj := ""
        obj += Visit(context.id()):(Result).text
        [0 < context.annotationAssign().Length] @ i {
            ? i > 0 {
                obj += "," Visit(context.annotationAssign(i)) ""
            } _ {
                obj += "(" Visit(context.annotationAssign(i)) ""
            }
        }
        ? context.annotationAssign().Length > 0 {
            obj += ")"
        }
        <- obj
    }

    VisitAnnotationAssign(context: AnnotationAssignContext -> v: any) {
        obj := ""
        id := ""
        ? context.id() >< nil {
            id = "" Visit(context.id()):(Result).text "="
        }
        r := Visit(context.expression()):(Result)
        obj = id + r.text
        <- obj
    }
}
