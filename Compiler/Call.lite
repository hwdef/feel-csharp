"Compiler" {
    "Antlr4/Runtime"
    "Antlr4/Runtime/Misc"
    "System"

    LiteParser. "Compiler" 
    Compiler_static. "Compiler" 
}

me LiteLangVisitor % {
    base%VisitCallExpression : (context CallExpressionContext -> v any) {
        r = Visit(context.id()).[Result]
        r.text = "." + r.text
        ? context.templateCall() >< nil {
            r.text += Visit(context.templateCall()).[str]
        }
        ? context.callFunc() >< nil {
            e2 = Visit(context.callFunc()).[Result]
            r.text = r.text + e2.text
        } context.callElement() >< nil {
            e2 = Visit(context.callElement()).[Result]
            r.text = r.text + e2.text
        } context.callChannel() >< nil {
            e2 = Visit(context.callChannel()).[Result]
            r.text = r.text + e2.text
        }
        <- r
    }

    base%VisitCallElement : (context CallElementContext -> v any) {
        ? context.expression() == nil {
            <- (Result{ text = Visit(context.slice()).[str] })
        }
        r = Visit(context.expression()).[Result]
        r.text = "[" r.text "]"
        <- r
    }

    base%VisitSlice : (context SliceContext -> v any) {
        <- Visit(context.GetChild(0)).[str]
    }

    base%VisitSliceFull : (context SliceFullContext -> v any) {
        order = ""
        attach = ""
        context.op.Type ? LiteParser.Add_Add {
            order = "true"
            attach = "true"
        } LiteParser.Sub_Sub {
            order = "false"
            attach = "true"
        }
        expr1 = Visit(context.expression(0)).[Result]
        expr2 = Visit(context.expression(1)).[Result]
        <- ".slice("expr1.text", "expr2.text", "order", "attach")"
    }

    base%VisitSliceStart : (context SliceStartContext -> v any) {
        order = ""
        attach = ""
        context.op.Type ? LiteParser.Add_Add {
            order = "true"
            attach = "true"
        } LiteParser.Sub_Sub {
            order = "false"
            attach = "true"
        }
        expr = Visit(context.expression()).[Result]
        <- ".slice("expr.text", null, "order", "attach")"
    }

    base%VisitSliceEnd : (context SliceEndContext -> v any) {
        order = ""
        attach = ""
        context.op.Type ? LiteParser.Add_Add {
            order = "true"
            attach = "true"
        } LiteParser.Sub_Sub {
            order = "false"
            attach = "true"
        }
        expr = Visit(context.expression()).[Result]
        <- ".slice(null, "expr.text", "order", "attach")"
    }

    base%VisitCallFunc : (context CallFuncContext -> v any) {
        r = Result{data = "var"}
        r.text += ? -> context.tuple() >< nil {
            Visit(context.tuple()).[Result].text
        } _ {
            "(" Visit(context.lambda()).[Result].text ")"
        }

        <- r
    }

    base%VisitCallPkg : (context CallPkgContext -> v any) {
        r = Result{data = Visit(context.typeType())}
        r.text = "(new "Visit(context.typeType())"()"
        ? context.pkgAssign() >< nil {
            r.text += Visit(context.pkgAssign())
        } context.listAssign() >< nil {
            r.text += Visit(context.listAssign())
        } context.setAssign() >< nil {
            r.text += Visit(context.setAssign())
        } context.dictionaryAssign() >< nil {
            r.text += Visit(context.dictionaryAssign())
        }
        r.text += ")"
        <- r
    }

    base%VisitCallNew : (context CallNewContext -> v any) {
        r = Result{data = Visit(context.typeType())}
        param = ""
        ? context.expressionList() >< nil {
            param = Visit(context.expressionList()).[Result].text
        }
        r.text = "(new "Visit(context.typeType())"("param")"
        r.text += ")"
        <- r
    }

    base%VisitPkgAssign : (context PkgAssignContext -> v any) {
        obj = ""
        obj += "{"
        i @ 0 ..< context.pkgAssignElement().Length {
            obj += ? -> i == 0 {
                Visit(context.pkgAssignElement(i))
            } _ {
                "," + Visit(context.pkgAssignElement(i))
            }
        }
        obj += "}"
        <- obj
    }

    base%VisitListAssign : (context ListAssignContext -> v any) {
        obj = ""
        obj += "{"
        i @ 0 ..< context.expression().Length {
            r = Visit(context.expression(i)).[Result]
            obj += ? -> i == 0 {
                r.text
            } _ {
                "," + r.text
            }
        }
        obj += "}"
        <- obj
    }

    base%VisitSetAssign : (context SetAssignContext -> v any) {
        obj = ""
        obj += "{"
        i @ 0 ..< context.expression().Length {
            r = Visit(context.expression(i)).[Result]
            obj += ? -> i == 0 {
                r.text
            } _ {
                "," + r.text
            }
        }
        obj += "}"
        <- obj
    }

    base%VisitDictionaryAssign : (context DictionaryAssignContext -> v any) {
        obj = ""
        obj += "{"
        i @ 0 ..< context.dictionaryElement().Length {
            r = Visit(context.dictionaryElement(i)).[DicEle]
            obj += ? -> i == 0 {
                r.text
            } _ {
                "," + r.text
            }
        }
        obj += "}"
        <- obj
    }

    base%VisitPkgAssignElement : (context PkgAssignElementContext -> v any) {
        obj = ""
        obj += Visit(context.name()) + " = " + Visit(context.expression()).[Result].text
        <- obj
    }

    base%VisitPkgAnonymous : (context PkgAnonymousContext -> v any) {
        <- Result{
            data = "var"
            text = "new" + Visit(context.pkgAnonymousAssign()).[str]
        }
    }

    base%VisitPkgAnonymousAssign : (context PkgAnonymousAssignContext -> v any) {
        obj = ""
        obj += "{"
        i @ 0 ..< context.pkgAnonymousAssignElement().Length {
            obj += ? -> i == 0 {
                Visit(context.pkgAnonymousAssignElement(i))
            } _ {
                "," + Visit(context.pkgAnonymousAssignElement(i))
            }
        }
        obj += "}"
        <- obj
    }

    base%VisitPkgAnonymousAssignElement : (context PkgAnonymousAssignElementContext -> v any) {
        obj = ""
        obj += Visit(context.name()) + " = " + Visit(context.expression()).[Result].text
        <- obj
    }

    base%VisitCallAwait : (context CallAwaitContext -> v any) {
        r = Result{}
        expr = Visit(context.expression()).[Result]
        r.data = "var"
        r.text = "await " + expr.text
        <- r
    }

    base%VisitList : (context ListContext -> v any) {
        type = Any
        result = Result{}
        i @ 0 ..< context.expression().Length {
            r = Visit(context.expression(i)).[Result]
            result.text += ? -> i == 0 {
                type = r.data.[str]
                r.text
            } _ {
                ? type >< r.data.[str] {
                    type = Any
                }
                "," + r.text
            }
        }
        result.data = "" Lst "<"type">"
        result.text = "(new "result.data"(){ "result.text" })"
        <- result
    }

    base%VisitSet : (context SetContext -> v any) {
        type = Any
        result = Result{}
        i @ 0 ..< context.expression().Length {
            r = Visit(context.expression(i)).[Result]
            result.text += ? -> i == 0 {
                type = r.data.[str]
                r.text
            } _ {
                ? type >< r.data.[str] {
                    type = Any
                }
                "," + r.text
            }
        }
        result.data = "" Set "<"type">"
        result.text = "(new "result.data"(){ "result.text" })"
        <- result
    }

    base%VisitDictionary : (context DictionaryContext -> v any) {
        key = Any
        value = Any
        result = Result{}
        i @ 0 ..< context.dictionaryElement().Length {
            r = Visit(context.dictionaryElement(i)).[DicEle]
            result.text += ? -> i == 0 {
                key = r.key
                value = r.value
                r.text
            } _ {
                ? key >< r.key {
                    key = Any
                }
                ? value >< r.value {
                    value = Any
                }
                "," + r.text
            }
        }
        type = key + "," + value
        result.data = "" Dic "<"type">"
        result.text = "(new "result.data"(){ "result.text" })"
        <- result
    }

    base%VisitDictionaryElement : (context DictionaryElementContext -> v any) {
        r1 = Visit(context.expression(0)).[Result]
        r2 = Visit(context.expression(1)).[Result]
        result = DicEle{
            key = r1.data.[str]
            value = r2.data.[str]
            text = "{" + r1.text + "," + r2.text + "}"
        }
        <- result
    }

    base%VisitFunctionExpression : (context FunctionExpressionContext -> v any) {
        r = Result{}
        # 异步 #
        ? context.t.Type == Right_Flow {
            r.text += " async "
        }
        r.text += Visit(context.parameterClauseIn()) + " => " + BlockLeft + Wrap
        me.add_current_set()
        r.text += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        r.text += BlockRight + Wrap
        r.data = "var"
        <- r
    }

    base%VisitLambda : (context LambdaContext -> v any) {
        r = Result{data = "var"}
        # 异步 #
        ? context.t.Type == Right_Flow {
            r.text += "async "
        }
        r.text += "("
        ? context.lambdaIn() >< nil {
            r.text += Visit(context.lambdaIn())
        }
        r.text += ")"
        r.text += "=>"

        ? context.tupleExpression() >< nil {
            r.text += Visit(context.tupleExpression()).[Result].text
        } _ {
            me.add_current_set()
            r.text += "{" + ProcessFunctionSupport(context.functionSupportStatement()) + "}"
            me.delete_current_set()
        }

        <- r
    }

    base%VisitLambdaIn : (context LambdaInContext -> v any) {
        obj = ""
        i @ 0 ..< context.id().Length {
            r = Visit(context.id(i)).[Result]
            obj += ? -> i == 0 {
                r.text
            } _ {
                ", " + r.text
            }
            me.add_id(r.text)
        }
        <- obj
    }
}
