"Compiler" {
    "Antlr4/Runtime"
    "Antlr4/Runtime/Misc"
    "System"

    "Compiler" LiteParser.
    "Compiler" Compiler_static.
}

(base)me LiteLangVisitor -> {
    VisitIncludeStatement(context IncludeStatementContext -> v any) {
        <- Visit(context.typeType())
    }

    VisitPackageStatement(context PackageStatementContext -> v any) {
        id = Visit(context.id()).(Result)
        obj = ""
        extend = ""

        context.packageSupportStatement() @ item {
            ? item.GetChild(0).GetType() == ?(IncludeStatementContext) {
                ? extend == "" {
                    extend += Visit(item)
                } _ {
                    extend += "," + Visit(item)
                }
            } _ {
                obj += Visit(item)
            }
        }
        obj += BlockRight + Wrap
        header = ""
        ? context.annotationSupport() >< nil {
            header += Visit(context.annotationSupport())
        }
        header += ""id.permission" partial class "id.text""
        # 泛型 #
        template = ""
        templateContract = ""
        ? context.templateDefine() >< nil {
            item = Visit(context.templateDefine()).(TemplateItem)
            template += item.Template
            templateContract = item.Contract
            header += template;
        }

        ? extend.Length > 0 {
            header += ":"
            ? extend.Length > 0 {
                header += extend
            }
        }

        header += templateContract + Wrap + BlockLeft + Wrap
        obj = header + obj
        <- obj
    }

    VisitPackageVariableStatement(context PackageVariableStatementContext -> v any) {
        r1 = Visit(context.id()).(Result)
        isMutable = r1.isVirtual
        typ = ""
        r2 Result = nil
        ? context.expression() >< nil {
            r2 = Visit(context.expression()).(Result)
            typ = r2.data.(str)
        }
        ? context.typeType() >< nil {
            typ = Visit(context.typeType()).(str)
        }
        obj = ""
        ? context.annotationSupport() >< nil {
            obj += Visit(context.annotationSupport())
        }

        obj += ""r1.permission" "typ" "r1.text""
        ? r2 >< nil {
            obj += " = "r2.text" "Terminate" "Wrap""
        } _ {
            obj += Terminate + Wrap
        }
        <- obj
    }

    VisitPackageControlSubStatement(context PackageControlSubStatementContext -> v any) {
        obj = ""
        id = ""
        typ = ""
        me.add_current_set()
        id, typ = GetControlSub(context.id(0).GetText())
        ? context.id(1) >< nil {
            me.setID = context.id(1).GetText()
        }
        ? context.functionSupportStatement().Length > 0 {
            obj += id + BlockLeft
            context.functionSupportStatement() @ item {
                obj += Visit(item)
            }
            obj += BlockRight + Wrap
        } _ {
            obj += id + Terminate
        }
        me.delete_current_set()
        me.setID = ""
        <- Result{ text = obj, data = typ }
    }

    VisitPackageNewStatement(context PackageNewStatementContext -> v any) {
        text = ""
        Self = Visit(context.parameterClauseSelf()).(Parameter)
        me.selfID = Self.id
        text += ""Self.permission" partial class "Self.type""BlockLeft + Wrap""
        text += "public " Self.type " "
        # 获取构造数据 #
        me.add_current_set()
        text += Visit(context.parameterClauseIn()).(str)
        ? context.expressionList() >< nil {
            text += ":base(" Visit(context.expressionList()).(Result).text ")"
        }
        text += BlockLeft + ProcessFunctionSupport(context.functionSupportStatement()) + BlockRight + Wrap
        me.delete_current_set()
        text += BlockRight + Wrap
        me.selfID = ""
        <- text
    }

    VisitPackageEventStatement(context PackageEventStatementContext -> v any) {
        obj = ""
        id = Visit(context.id()).(Result)
        nameSpace = Visit(context.nameSpaceItem())
        obj += "public event "nameSpace" "id.text + Terminate + Wrap""
        <- obj
    }

    VisitProtocolStatement(context ProtocolStatementContext -> v any) {
        id = Visit(context.id()).(Result)
        obj = ""
        interfaceProtocol = ""
        ptclName = id.text
        ? context.annotationSupport() >< nil {
            obj += Visit(context.annotationSupport())
        }
        context.protocolSupportStatement() @ item {
            r = Visit(item).(Result)
            interfaceProtocol += r.text
        }
        obj += "public partial interface " + ptclName
        # 泛型 #
        templateContract = ""
        ? context.templateDefine() >< nil {
            template = Visit(context.templateDefine()).(TemplateItem)
            obj += template.Template
            templateContract = template.Contract
        }
        obj += templateContract + Wrap + BlockLeft + Wrap
        obj += interfaceProtocol
        obj += BlockRight + Wrap
        <- obj
    }

    VisitProtocolControlStatement(context ProtocolControlStatementContext -> v any) {
        id = Visit(context.id()).(Result)
        isMutable = id.isVirtual
        r = Result{}
        ? context.annotationSupport() >< nil {
            r.text += Visit(context.annotationSupport())
        }
        r.permission = "public"
        type = Visit(context.typeType()).(str)
        r.text += type + " " + id.text
        r.text += BlockLeft
        ? context.protocolControlSubStatement().Length > 0 {
            context.protocolControlSubStatement() @ item {
                r.text += Visit(item)
            }
        } _ {
            r.text += "get;set;"
        }

        r.text += BlockRight + Wrap
        <- r
    }

    VisitProtocolControlSubStatement(context ProtocolControlSubStatementContext -> v any) {
        obj = ""
        obj = GetControlSub(context.id().GetText()).id + Terminate
        <- obj
    }

    VisitProtocolFunctionStatement(context ProtocolFunctionStatementContext -> v any) {
        id = Visit(context.id()).(Result)
        r = Result{}
        ? context.annotationSupport() >< nil {
            r.text += Visit(context.annotationSupport())
        }
        r.permission = "public"
        # 异步 #
        ? context.t.Type == Right_Flow {
            pout = Visit(context.parameterClauseOut()).(str)
            ? pout >< "void" {
                pout = ""Task"<"pout">"
            } _ {
                pout = Task
            }
            r.text += pout + " " + id.text
        } _ {
            r.text += Visit(context.parameterClauseOut()) + " " + id.text
        }
        # 泛型 #
        templateContract = ""
        ? context.templateDefine() >< nil {
            template = Visit(context.templateDefine()).(TemplateItem)
            r.text += template.Template
            templateContract = template.Contract
        }
        r.text += Visit(context.parameterClauseIn()) + templateContract + Terminate + Wrap
        <- r
    }
}
