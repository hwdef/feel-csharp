"Compiler" {
    "Antlr4/Runtime"
    "Antlr4/Runtime/Misc"
    "System"

    LiteParser. "Compiler" 
    Compiler_static. "Compiler" 
}

base me LiteLangVisitor -> {
    VisitCheckStatement(context CheckStatementContext -> v any) {
        obj = "try "BlockLeft+Wrap""
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += ""BlockRight+Wrap""
        item @ context.checkErrorStatement() {
            obj += ""Visit(item)"" Wrap""
        }

        ? context.checkFinallyStatment() >< nil {
            obj += Visit(context.checkFinallyStatment())
        }
        <- obj
    }

    VisitCheckErrorStatement(context CheckErrorStatementContext -> v any) {
        me.add_current_set()
        obj = ""
        ID = Visit(context.id()).[Result].text
        me.add_id(ID)

        Type = "Exception"
        ? context.typeType() >< nil {
            Type = Visit(context.typeType()).[str]
        }

        obj += "catch( "Type" "ID" )"+Wrap+BlockLeft+Wrap
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight
        <- obj
    }

    VisitCheckFinallyStatment(context CheckFinallyStatmentContext -> v any) {
        obj = "finally "Wrap+BlockLeft+Wrap""
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += ""BlockRight""Wrap""
        <- obj
    }

    VisitUsingStatement(context UsingStatementContext -> v any) {
        obj = ""
        r1 = Visit(context.expression(0)).[Result]
        r2 = Visit(context.expression(1)).[Result]
        ? context.typeType() >< nil {
            Type = Visit(context.typeType()).[str]
            obj = ""Type" "r1.text" = "r2.text""
        } _ {
            obj = "var "r1.text" = "r2.text""
        }
        <- obj
    }
}
