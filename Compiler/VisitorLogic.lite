"Compiler" {
    "Antlr4/Runtime"
    "Antlr4/Runtime/Misc"
    "System"

    "Compiler" LiteParser.
    "Compiler" Compiler_static.
}

Iterator -> {
    begin Result
    end Result
    step Result
    order str = T
    attach str = F
}

(base)me LiteLangVisitor -> {
    VisitIteratorStatement(context IteratorStatementContext -> v any) {
        it = Iterator{}
        ? context.op.Text == ">=" | context.op.Text == "<=" {
            it.attach = T
        }
        ? context.op.Text == ">" | context.op.Text == ">=" {
            it.order = F
        }
        ? context.expression().Length == 2 {
            it.begin = Visit(context.expression(0)).(Result)
            it.end = Visit(context.expression(1)).(Result)
            it.step = Result{ data = I32, text = "1" }
        } _ {
            it.begin = Visit(context.expression(0)).(Result)
            it.end = Visit(context.expression(1)).(Result)
            it.step = Visit(context.expression(2)).(Result)
        }
        <- it
    }

<<<<<<< HEAD
    VisitLoopStatement(context LoopStatementContext -> v any) {
        me.CurrentIDSet = [str]{}

        obj = ""
        id = Visit(context.id()).(Result).text
        me.CurrentIDSet = [str]{}
        me.CurrentIDSet.add(id)
        me.AllIDSet.add(id)
=======
    VisitLoopStatement(context: LoopStatementContext -> v: any) {
        obj := ""
        id := Visit(context.id()):(Result).text
>>>>>>> fix-define-bug
        
        it = Visit(context.iteratorStatement()).(Iterator)

        obj += "foreach (var "id" in range("it.begin.text","it.end.text","it.step.text","it.order","it.attach"))"

        obj += BlockLeft+Wrap
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight+Wrap
        <- obj
    }

<<<<<<< HEAD
    VisitLoopInfiniteStatement(context LoopInfiniteStatementContext -> v any) {
        me.CurrentIDSet = [str]{}

        obj = "for (;;) "BlockLeft+Wrap""
=======
    VisitLoopInfiniteStatement(context: LoopInfiniteStatementContext -> v: any) {
        obj := "for (;;) "BlockLeft+Wrap""
        me.add_current_set()
>>>>>>> fix-define-bug
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight+Wrap
        <- obj
    }

    VisitLoopEachStatement(context LoopEachStatementContext -> v any) {
        me.CurrentIDSet = [str]{}

        obj = ""
        arr = Visit(context.expression()).(Result)
        target = arr.text
        id = "ea"
        ? context.id().Length == 2 {
            target = "range("target")"
            id = "("Visit(context.id(0)).(Result).text","Visit(context.id(1)).(Result).text")"
        } context.id().Length == 1 {
            id = Visit(context.id(0)).(Result).text
        }

        obj += "foreach (var "id" in "target")"
        obj += BlockLeft+Wrap
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight+Wrap
        <- obj
    }

    VisitLoopCaseStatement(context LoopCaseStatementContext -> v any) {
        me.CurrentIDSet = [str]{}

        obj = ""
        expr = Visit(context.expression()).(Result)
        obj += "for ( ;"expr.text" ;)"
        obj += BlockLeft+Wrap
        me.add_current_set()
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight+Wrap
        <- obj
    }

    VisitLoopJumpStatement(context LoopJumpStatementContext -> v any) {
        <- "break "Terminate+Wrap""
    }

    VisitLoopContinueStatement(context LoopContinueStatementContext -> v any) {
        <- "continue "Terminate+Wrap""
    }

    VisitJudgeCaseStatement(context JudgeCaseStatementContext -> v any)  {
        obj = ""
        expr = Visit(context.expression()).(Result)
        obj += "switch ("expr.text") "BlockLeft+Wrap""
        context.caseStatement() @ item {
            r = Visit(item).(str)
            obj += r + Wrap
        }
        obj += ""BlockRight" "Wrap""
        <- obj
    }

    VisitCaseExprStatement(context CaseExprStatementContext -> v any) {
        obj = ""
        ? context.expression() >< nil  {
            expr = Visit(context.expression()).(Result)
            obj += "case "expr.text" :"Wrap""
        } context.typeType() >< nil {
            id = "it"
            ? context.id() >< nil {
                id = Visit(context.id()).(Result).text
            }
<<<<<<< HEAD
            me.AllIDSet.add(id)
            me.CurrentIDSet.add(id)
            type = Visit(context.typeType()).(str)
=======
            me.add_id(id)
            type := Visit(context.typeType()):(str)
>>>>>>> fix-define-bug
            obj += "case "type" "id" :"Wrap""
        } _ {
            obj += "default:"Wrap""
        }
        <- obj
    }

<<<<<<< HEAD
    VisitCaseStatement(context CaseStatementContext -> v any) {
        me.CurrentIDSet = [str]{}
        obj = ""
        context.caseExprStatement() @ item {
            r = Visit(item).(str)
            process = ""BlockLeft" "ProcessFunctionSupport(context.functionSupportStatement())"" BlockRight"break;"
=======
    VisitCaseStatement(context: CaseStatementContext -> v: any) {
        obj := ""
        context.caseExprStatement() @ item {
            r := Visit(item):(str)
            me.add_current_set()
            process := ""BlockLeft" "ProcessFunctionSupport(context.functionSupportStatement())"" BlockRight"break;"
            me.delete_current_set()
>>>>>>> fix-define-bug
            obj += r + process
        }
        <- obj
    }

    VisitJudgeStatement(context JudgeStatementContext -> v any) {
        obj = ""
        obj += Visit(context.judgeIfStatement())
        context.judgeElseIfStatement() @ it {
            obj += Visit(it)
        }
        ? context.judgeElseStatement() >< nil {
            obj += Visit(context.judgeElseStatement())
        }
        <- obj
    }

<<<<<<< HEAD
    VisitJudgeIfStatement(context JudgeIfStatementContext -> v any) {
        me.CurrentIDSet = [str]{}

        b = Visit(context.expression()).(Result)
        obj = "if ( "b.text" ) "BlockLeft+Wrap""
=======
    VisitJudgeIfStatement(context: JudgeIfStatementContext -> v: any) {
        b := Visit(context.expression()):(Result)
        obj := "if ( "b.text" ) "BlockLeft+Wrap""
        me.add_current_set()
>>>>>>> fix-define-bug
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += ""BlockRight""Wrap""
        <- obj
    }

<<<<<<< HEAD
    VisitJudgeElseIfStatement(context JudgeElseIfStatementContext -> v any) {
        me.CurrentIDSet = [str]{}

        b = Visit(context.expression()).(Result)
        obj = "else if ( "b.text" ) "BlockLeft+Wrap""
=======
    VisitJudgeElseIfStatement(context: JudgeElseIfStatementContext -> v: any) {
        b := Visit(context.expression()):(Result)
        obj := "else if ( "b.text" ) "BlockLeft+Wrap""
        me.add_current_set()
>>>>>>> fix-define-bug
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += ""BlockRight" "Wrap""
        <- obj
    }

<<<<<<< HEAD
    VisitJudgeElseStatement(context JudgeElseStatementContext -> v any) {
        me.CurrentIDSet = [str]{}

        obj = "else "BlockLeft+Wrap""
=======
    VisitJudgeElseStatement(context: JudgeElseStatementContext -> v: any) {
        obj := "else "BlockLeft+Wrap""
        me.add_current_set()
>>>>>>> fix-define-bug
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += ""BlockRight""Wrap""
        <- obj
    }

<<<<<<< HEAD
    VisitCheckStatement(context CheckStatementContext -> v any) {
        me.CurrentIDSet = [str]{}
        
        obj = "try "BlockLeft+Wrap""
=======
    VisitCheckStatement(context: CheckStatementContext -> v: any) {
        obj := "try "BlockLeft+Wrap""
        me.add_current_set()
>>>>>>> fix-define-bug
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += ""BlockRight+Wrap""
        context.checkErrorStatement() @ item {
            obj += ""Visit(item)"" Wrap""
        }

        ? context.checkFinallyStatment() >< nil {
            obj += Visit(context.checkFinallyStatment())
        }
        <- obj
    }

<<<<<<< HEAD
    VisitCheckErrorStatement(context CheckErrorStatementContext -> v any) {
        me.CurrentIDSet = [str]{}

        obj = ""
        ID = Visit(context.id()).(Result).text
        me.AllIDSet.add(ID)
        me.CurrentIDSet.add(ID)
=======
    VisitCheckErrorStatement(context: CheckErrorStatementContext -> v: any) {
        me.add_current_set()
        obj := ""
        ID := Visit(context.id()):(Result).text
        me.add_id(ID)
>>>>>>> fix-define-bug

        Type = "Exception"
        ? context.typeType() >< nil {
            Type = Visit(context.typeType()).(str)
        }

        obj += "catch( "Type" "ID" )"+Wrap+BlockLeft+Wrap
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight
        <- obj
    }

<<<<<<< HEAD
    VisitCheckFinallyStatment(context CheckFinallyStatmentContext -> v any) {
        me.CurrentIDSet = [str]{}

        obj = "finally "Wrap+BlockLeft+Wrap""
=======
    VisitCheckFinallyStatment(context: CheckFinallyStatmentContext -> v: any) {
        obj := "finally "Wrap+BlockLeft+Wrap""
        me.add_current_set()
>>>>>>> fix-define-bug
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += ""BlockRight""Wrap""
        <- obj
    }

    VisitUsingStatement(context UsingStatementContext -> v any) {
        obj = ""
        r2 = Visit(context.expression(0)).(Result)
        r1 = Visit(context.expression(1)).(Result)
        ? context.typeType() >< nil {
            Type = Visit(context.typeType()).(str)
            obj = ""Type" "r1.text" = "r2.text""
        } _ {
            obj = "var "r1.text" = "r2.text""
        }
        <- obj
    }

    VisitReportStatement(context ReportStatementContext -> v any) {
        obj = ""
        ? context.expression() >< nil {
            r = Visit(context.expression()).(Result)
            obj += r.text
        }
        <- "throw "obj+Terminate+Wrap""
    }

    VisitLinq(context LinqContext -> v any) {
        r = Result{data = "var"}
        r.text += "from " Visit(context.expression(0)).(Result).text " "
        context.linqItem() @ item {
            r.text += "" Visit(item) " "
        }
        r.text += ""context.k.Text " " Visit(context.expression(1)).(Result).text ""
        <- r
    }

    VisitLinqItem(context LinqItemContext -> v any) {
        obj = Visit(context.linqKeyword()).(str)
        ? context.expression() >< nil {
            obj += " "Visit(context.expression()).(Result).text""
        }
        <- obj
    }

    VisitLinqKeyword(context LinqKeywordContext -> v any) {
        <- Visit(context.GetChild(0))
    }

    VisitLinqHeadKeyword(context LinqHeadKeywordContext -> v any) {
        <- context.k.Text
    }

    VisitLinqBodyKeyword(context LinqBodyKeywordContext -> v any) {
        <- context.k.Text
    }
}
