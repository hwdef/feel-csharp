"Compiler" {
    "Antlr4/Runtime"
    "Antlr4/Runtime/Misc"
    "System"

    LiteParser. "Compiler" 
    Compiler_static. "Compiler" 
}

me LiteLangVisitor % {
    base%VisitImplementStatement : (context ImplementStatementContext -> v any) {
        Self = Visit(context.parameterClauseSelf()).[Parameter]
        me.selfID = Self.id
        isVirtual = ""
        obj = ""
        extends = ""
        ? context.typeType() >< nil {
            extends += ":" + Visit(context.typeType())
        }
        obj += ""Self.permission" partial class "Self.type + extends + BlockLeft + Wrap""
        item @ context.implementSupportStatement() {
            obj += Visit(item)
        }
        obj += BlockRight + Wrap
        me.selfID = ""
        <- obj
    }

    base%VisitImplementVariableStatement : (context ImplementVariableStatementContext -> v any) {
        r1 = Visit(context.id()).[Result]
        isMutable = r1.isVirtual
        isVirtual = ""
        ? r1.isVirtual {
            isVirtual = " virtual "
        }
        typ = ""
        r2 Result = nil
        ? context.expression() >< nil {
            r2 = Visit(context.expression()).[Result]
            typ = r2.data.[str]
        }
        ? context.typeType() >< nil {
            typ = Visit(context.typeType()).[str]
        }
        obj = ""
        ? context.annotationSupport() >< nil {
            me.selfPropertyID = r1.text
            obj += Visit(context.annotationSupport())
        }
        ? me.selfPropertyContent.len > 0 {
            pri = ""
            ? me.selfPropertyVariable {
                pri = "private "typ" _"r1.text"" 
                ? r2 >< nil {
                    pri += " = " + r2.text
                }
                pri += Terminate + Wrap
            }
            obj = pri + obj
            obj += ""r1.permission" "isVirtual" "typ" "r1.text""BlockLeft""
            v @ me.selfPropertyContent {
                obj += v
            }
            obj += BlockRight+Wrap
            me.selfPropertyContent.clear()
            me.selfPropertyID = ""
            me.selfPropertyVariable = false
        } _ {
            obj += ""r1.permission" "typ" "r1.text""
            obj += ? -> r2 >< nil {
                " = "r2.text" "Terminate" "Wrap""
            } _ {
                Terminate + Wrap
            }
        }
        <- obj
    }

    base%VisitImplementFunctionStatement : (context ImplementFunctionStatementContext -> v any) {
        id = Visit(context.id()).[Result]
        isVirtual = ""
        ? id.isVirtual {
            isVirtual = " virtual "
        }
        obj = ""
        # 异步 #
        obj += ""id.permission" "
        pout = Visit(context.parameterClauseOut()).[str]
        ? context.t.Type == Right_Flow {
            pout = ? -> pout >< "void" {
                ""Task"<"pout">"
            } _ {
                Task
            }
            obj += ""isVirtual" async "pout" "id.text""
        } _ {
            ? context.y >< nil {
                ? pout >< "void" {
                    pout = ""IEnum"<"pout">"
                }
            }
            obj += ""isVirtual" "pout" "id.text""
        }
        # 泛型 #
        templateContract = ""
        ? context.templateDefine() >< nil {
            template = Visit(context.templateDefine()).[TemplateItem]
            obj += template.Template
            templateContract = template.Contract
        }
        me.add_current_set()
        obj += Visit(context.parameterClauseIn()) + templateContract + BlockLeft + Wrap
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight + Wrap
        <- obj
    }

    base%VisitOverrideFunctionStatement : (context OverrideFunctionStatementContext -> v any) {
        id = Visit(context.id(1)).[Result]
        me.superID = Visit(context.id(0)).[Result].text
        isVirtual = " override "
        obj = ""
        # 异步 #
        obj += ? -> context.n >< nil {
            "protected "
        } _ {
            ""id.permission" "
        }
        pout = Visit(context.parameterClauseOut()).[str]
        ? context.t.Type == Right_Flow {
            pout = ? -> pout >< "void" {
                ""Task"<"pout">"
            } _ {
                Task
            }
            obj += ""isVirtual" async "pout" "id.text""
        } _ {
            ? context.y >< nil {
                ? pout >< "void" {
                    pout = ""IEnum"<"pout">"
                }
            }
            obj += ""isVirtual" "pout" "id.text""
        }
        # 泛型 #
        templateContract = ""
        ? context.templateDefine() >< nil {
            template = Visit(context.templateDefine()).[TemplateItem]
            obj += template.Template
            templateContract = template.Contract
        }
        me.add_current_set()
        obj += Visit(context.parameterClauseIn()) + templateContract + BlockLeft + Wrap
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        me.delete_current_set()
        obj += BlockRight + Wrap
        me.superID = ""
        <- obj
    }

    base%VisitOverrideControlStatement : (context OverrideControlStatementContext -> v any) {
        r1 = Visit(context.id(1)).[Result]
        me.superID = Visit(context.id(0)).[Result].text
        isMutable = true # r1.isVirtual #
        isVirtual = " override "
        typ = ""
        ? context.typeType() >< nil {
            typ = Visit(context.typeType()).[str]
        }
        obj = ""
        ? context.annotationSupport() >< nil {
            obj += Visit(context.annotationSupport())
        }
        obj += ""r1.permission" "isVirtual" "typ" "r1.text""BlockLeft""
        item @ context.packageControlSubStatement() {
            temp = Visit(item).[Result]
            obj += temp.text
        }
        obj += BlockRight + Wrap
        me.superID = ""
        <- obj
    }

    base%VisitImplementNewStatement : (context ImplementNewStatementContext -> v any) {
        text = ""
        Self = Visit(context.parameterClauseSelf()).[Parameter]
        me.selfID = Self.id
        text += ""Self.permission" partial class "Self.type""BlockLeft + Wrap""
        text += "public " Self.type " "
        # 获取构造数据 #
        me.add_current_set()
        text += Visit(context.parameterClauseIn()).[str]
        ? context.expressionList() >< nil {
            text += ":base(" Visit(context.expressionList()).[Result].text ")"
        }
        text += BlockLeft + ProcessFunctionSupport(context.functionSupportStatement()) + BlockRight + Wrap
        me.delete_current_set()
        text += BlockRight + Wrap
        me.selfID = ""
        <- text
    }
}
