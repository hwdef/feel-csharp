"Compiler" {
    "Antlr4/Runtime"
    "Antlr4/Runtime/Misc"
    "System"

    "Compiler" LiteParser.
    "Compiler" Compiler_Static.
}

Namespace -> {
    name: str
    imports: str
}

GetControlSub(id: str -> id: str, type:str) {
    typ := ""
    id ? "get" {
        id = " get "
        typ = "get"
    } "set" {
        id = " set "
        typ = "set"
    } "_get" {
        id = " protected get "
        typ = "get"
    } "_set" {
        id = " protected set "
        typ = "set"
    } "add" {
        id = " add "
        typ = "add"
    } "remove" {
        id = " remove "
        typ = "remove"
    }
    <- id, typ
}

(base)me: LiteLangVisitor -> {
    VisitStatement(context: StatementContext -> v: any) {
        obj := ""
        ns := Visit(context.exportStatement()):(Namespace)
        # import library #
        obj += "using Library;"Wrap"using static Library.Lib;"Wrap""
        obj += ns.imports + Wrap
        ? context.annotationSupport() >< nil {
            obj += Visit(context.annotationSupport())
        }
        obj += "namespace "ns.name + Wrap + BlockLeft + Wrap""

        content := ""
        contentStatic := ""
        context.namespaceSupportStatement() @ item {
            type := item.GetChild(0).GetType()
            ? type == ?(:NamespaceVariableStatementContext) |
                type == ?(:NamespaceControlStatementContext) |
                type == ?(:NamespaceFunctionStatementContext) |
                type == ?(:NamespaceConstantStatementContext) {
                contentStatic += Visit(item)
            } _ {
                content += Visit(item)
            }
        }
        obj += content
        ? contentStatic >< "" {
            obj += "public partial class "ns.name.sub_str(ns.name.last_index_of(".") + 1) "_static" +
                BlockLeft + Wrap + contentStatic + BlockRight + Wrap
        }
        obj += BlockRight + Wrap
        <- obj
    }

    VisitExportStatement(context: ExportStatementContext -> v: any) {
        name := context.TextLiteral().GetText()
        name = name.sub_str(1, name.len()-2)
        name = name.replace("/", ".")
        obj := Namespace{
            name = name
        }
        context.importStatement() @ item {
            obj.imports += Visit(item):(str)
        }
        <- obj
    }

    VisitImportStatement(context: ImportStatementContext -> v: any) {
        obj := ""
        ? context.annotationSupport() >< nil {
            obj += Visit(context.annotationSupport())
        }
        ns := context.TextLiteral().GetText()
        ns = ns.sub_str(1, ns.len()-2)
        ns = ns.replace("/", ".")
        ? context.call() >< nil {
            obj += "using static " + ns + "." + Visit(context.id()):(Result).text
        } context.id() >< nil {
            obj += "using " + ns + "." + Visit(context.id()):(Result).text
        } _ {
            obj += "using " + ns
        }
        obj += Terminate + Wrap
        <- obj
    }

    VisitNameSpaceItem(context: NameSpaceItemContext -> v: any) {
        obj := ""
        [0 < context.id().Length] @ i {
            id := Visit(context.id(i)):(Result)
            ? i == 0 {
                obj += "" + id.text
            } _ {
                obj += "." + id.text
            }
        }
        <- obj
    }

    VisitName(context: NameContext -> v: any) {
        obj := ""
        [0 < context.id().Length] @ i {
            id := Visit(context.id(i)):(Result)
            ? i == 0 {
                obj += "" + id.text
            } _ {
                obj += "." + id.text
            }
        }
        <- obj
    }

    VisitEnumStatement(context: EnumStatementContext -> v: any) {
        obj := ""
        id := Visit(context.id()):(Result)
        header := ""
        typ := Visit(context.typeType()):(str)
        ? context.annotationSupport() >< nil {
            header += Visit(context.annotationSupport())
        }
        header += id.permission + " enum " + id.text + ":" + typ
        header += Wrap + BlockLeft + Wrap
        [0 < context.enumSupportStatement().Length] @ i {
            obj += Visit(context.enumSupportStatement(i))
        }
        obj += BlockRight + Terminate + Wrap
        obj = header + obj
        <- obj
    }

    VisitEnumSupportStatement(context: EnumSupportStatementContext -> v: any) {
        id := Visit(context.id()):(Result)
        ? context.integerExpr() >< nil {
            op := ""
            ? context.add() >< nil {
                op = Visit(context.add()):(str)
            }
            id.text += " = " + op + Visit(context.integerExpr())
        }
        <- id.text + ","
    }

    VisitNamespaceFunctionStatement(context: NamespaceFunctionStatementContext -> v: any) {
        id := Visit(context.id()):(Result)
        obj := ""
        ? context.annotationSupport() >< nil {
            obj += Visit(context.annotationSupport())
        }
        # 异步 #
        ? context.t.Type == Right_Flow {
            pout := Visit(context.parameterClauseOut()):(str)
            ? pout >< "void" {
                pout = ""Task"<"pout">"
            } _ {
                pout = Task
            }
            obj += ""id.permission" async static "pout" "id.text""
        } _ {
            obj += ""id.permission" static "Visit(context.parameterClauseOut())" "id.text""
        }

        # 泛型 #
        templateContract := ""
        ? context.templateDefine() >< nil {
            template := Visit(context.templateDefine()):(TemplateItem)
            obj += template.Template
            templateContract = template.Contract
        }
        obj += Visit(context.parameterClauseIn()) + templateContract + Wrap + BlockLeft + Wrap
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        obj += BlockRight + Wrap
        <- obj
    }

    VisitNamespaceConstantStatement(context: NamespaceConstantStatementContext -> v: any) {
        id := Visit(context.id()):(Result)
        expr := Visit(context.expression()):(Result)
        typ := ""
        ? context.typeType() >< nil {
            typ = Visit(context.typeType()):(str)
        } _ {
            typ = expr.data:(str)
        }

        obj := ""
        ? context.annotationSupport() >< nil {
            obj += Visit(context.annotationSupport())
        }
        
        obj += ""id.permission" const "typ" "id.text" = "expr.text" "Terminate + Wrap""
        <- obj
    }

    VisitNamespaceVariableStatement(context: NamespaceVariableStatementContext -> v: any) {
        r1 := Visit(context.id()):(Result)
        isMutable := r1.isVirtual
        typ := ""
        r2: Result = nil
        ? context.expression() >< nil {
            r2 = Visit(context.expression()):(Result)
            typ = r2.data:(str)
        }
        ? context.typeType() >< nil {
            typ = Visit(context.typeType()):(str)
        }
        obj := ""
        ? context.annotationSupport() >< nil {
            obj += Visit(context.annotationSupport())
        }

        obj += ""r1.permission" static "typ" "r1.text""
        ? r2 >< nil {
            obj += " = "r2.text" "Terminate+Wrap""
        } _ {
            obj += Terminate + Wrap
        }
        <- obj
    }

    VisitNamespaceControlStatement(context: NamespaceControlStatementContext -> v: any) {
        r1 := Visit(context.id()):(Result)
        isMutable := r1.isVirtual
        typ := ""
        typ = Visit(context.typeType()):(str)
        obj := ""
        ? context.annotationSupport() >< nil {
            obj += Visit(context.annotationSupport())
        }

        obj += ""r1.permission" static "typ" "r1.text + BlockLeft""
        ? context.expression() >< nil {
            expr := me.Visit(context.expression()):(Result)
            obj += "get{return "expr.text"; }set{"expr.text"=value;}"
        } _ {
            context.packageControlSubStatement() @ item {
                temp := Visit(item):(Result)
                obj += temp.text
            }
        }
        obj += BlockRight + Wrap
        <- obj
    }
}
