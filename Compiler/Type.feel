<- Compiler

-> {
    Antlr4.Runtime
    Antlr4.Runtime.Misc
    System
    System.Collections.Generic

    _ : Compiler.FeelParser
    _ : Compiler.Compiler_static
}

KLangVisitor : $ me {
    .VisitTypeType : (context TypeTypeContext -> v any) {
        obj! : ""
        obj = Visit(context.GetChild(0)) str!
        <- obj
    }

    .VisitTypeNullable : (context TypeNullableContext -> v any) {
        obj! : ""
        obj = Visit(context.typeNotNull()) str!
        obj += "?"
        <- obj
    }

    .VisitTypePackage : (context TypePackageContext -> v any) {
        obj! : ""
        obj += Visit(context.nameSpaceItem())
        ? context.templateCall() >< nil {
            ? obj == "array" {
                obj = "${Visit(context.templateCall())}[]"
            } _ {
                obj += "<" + Visit(context.templateCall()) + ">"
            }
        }
        <- obj
    }

    .VisitTypeFunction : (context TypeFunctionContext -> v any) {
        obj! : ""
        in! : Visit(context.typeFunctionParameterClause(0)) str!
        out! : Visit(context.typeFunctionParameterClause(1)) str!
        ? context.t.Type == Right_Arrow {
            ? out.Length == 0 {
                ? in.Length == 0 {
                    obj = "Action"
                } _ {
                    obj = "Action<${in}>"
                }
            } _ {
                ? out.first_index_of(",") >= 0 {
                    out = "(${out})"
                }
                ? context.y >< nil {
                    out = "${IEnum}<${out}>"
                }
                ? in.Length == 0 {
                    obj = "Func<${out}>"
                } _ {
                    obj = "Func<${in}, ${out}>"
                }
            }
        } _ {
            ? out.Length == 0 {
                ? in.Length == 0 {
                    obj = "Func<${Task}>"
                } _ {
                    obj = "Func<${in}, ${Task}>"
                }
            } _ {
                ? context.y >< nil {
                    out = "${IEnum}<(${out})>"
                }
                ? in.Length == 0 {
                    obj = "Func<${Task}<${out}>>"
                } _ {
                    obj = "Func<${in}, ${Task}<${out}>>"
                }
            }
        }
        <- obj
    }

    .VisitTypeAny : (context TypeAnyContext -> v any) {
        <- Any
    }

    .VisitTypeFunctionParameterClause : (context TypeFunctionParameterClauseContext -> v any) {
        obj! : ""
        @ i : 0 .. context.typeType().Length-1 {
            p : Visit(context.typeType(i)) str!
            ? i == 0 {
                obj += p
            } _ {
                obj += ", " + p
            }
        }
        <- obj
    }

    .VisitTypeBasic : (context TypeBasicContext -> v any) {
        obj : ""
        ? context.t.Type : TypeI8 {
            obj = I8
        } TypeU8 {
            obj = U8
        } TypeI16 {
            obj = I16
        } TypeU16 {
            obj = U16
        } TypeI32 {
            obj = I32
        } TypeU32 {
            obj = U32
        } TypeI64 {
            obj = I64
        } TypeU64 {
            obj = U64
        } TypeF32 {
            obj = F32
        } TypeF64 {
            obj = F64
        } TypeChr {
            obj = Chr
        } TypeStr {
            obj = Str
        } TypeBool {
            obj = Bool
        } TypeInt {
            obj = Int
        } TypeNum {
            obj = Num
        } TypeByte {
            obj = U8
        } _ {
            obj = Any
        }
        <- obj
    }
}
