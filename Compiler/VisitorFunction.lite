"Compiler" {
    "Antlr4/Runtime"
    "Antlr4/Runtime/Misc"
    "System"

    "Compiler" LiteParser.
    "Compiler" Compiler_static.
}

Parameter -> {
    id str
    type str
    value str
    annotation str
    permission str
}

me LiteLangVisitor -> {
    ProcessFunctionSupport(items [:]FunctionSupportStatementContext -> v str) {
        obj = ""
        content = ""
        lazy = []str{}
        item @ items {
            ? item.GetChild(0) == <UsingStatementContext> {
                lazy.add("}")
                content += "using ("Visit(item).(str)") "BlockLeft" "Wrap""
            } _ {
                content += Visit(item)
            }
        }
        ? lazy.Count > 0 {
            i @ [lazy.Count - 1 >= 0] {
                content += BlockRight
            }
        }
        obj += content
        <- obj
    }
}

(base)me LiteLangVisitor -> {
    VisitFunctionStatement(context FunctionStatementContext -> v any) {
        id = Visit(context.id()).(Result)
        obj = ""
        # 异步 #
        ? context.t.Type == Right_Flow {
            pout = Visit(context.parameterClauseOut()).(str)
            ? pout >< "void" {
                pout = ""Task"<"pout">"
            } _ {
                pout = Task
            }
            obj += " async "pout" "id.text""
        } _ {
            obj += ""Visit(context.parameterClauseOut())" "id.text""
        }
        # 泛型 #
        templateContract = ""
        ? context.templateDefine() >< nil {
            template = Visit(context.templateDefine()).(TemplateItem)
            obj += template.Template
            templateContract = template.Contract
        }
        me.add_current_set()
        obj += ""Visit(context.parameterClauseIn())" "templateContract" "Wrap" "BlockLeft" "Wrap""
        obj += ProcessFunctionSupport(context.functionSupportStatement())
        obj += BlockRight + Wrap
        me.delete_current_set()
        <- obj
    }

    VisitReturnStatement(context ReturnStatementContext -> v any) {
        ? context.tupleExpression() >< nil {
            r = Visit(context.tupleExpression()).(Result)
            <- "return " + r.text + Terminate + Wrap
        }
        <- "return"Terminate""Wrap""
    }

    VisitTuple(context TupleContext -> v any) {
        obj = "("
        i @ [0 < context.expression().Length] {
            r = Visit(context.expression(i)).(Result)
            ? i == 0 {
                obj += r.text
            } _ {
                obj += ", " r.text ""
            }
        }
        obj += ")"
        <- Result{ data = "var", text = obj }
    }

    VisitTupleExpression(context TupleExpressionContext -> v any) {
        obj = ""
        i @ [0 < context.expression().Length] {
            r = Visit(context.expression(i)).(Result)
            ? i == 0 {
                obj += r.text
            } _ {
                obj += ", " r.text ""
            }
        }
        ? context.expression().Length > 1 {
            obj = "(" obj ")"
        }
        <- Result{ data = "var", text = obj }
    }

    VisitParameterClauseIn(context ParameterClauseInContext -> v any) {
        obj = "("
        temp = []str{}
        i @ [context.parameter().Length - 1 >= 0] {
            p = Visit(context.parameter(i)).(Parameter)
            temp.add(""p.annotation" "p.type" "p.id" "p.value"")
            me.add_id(p.id)
        }
        i @ [temp.Count - 1 >= 0] {
            ? i == temp.Count - 1 {
                obj += temp[i]
            } _ {
                obj += ", "temp[i]""
            }
        }

        obj += ")"
        <- obj
    }

    VisitParameterClauseOut(context ParameterClauseOutContext -> v any) {
        obj = ""
        ? context.parameter().Length == 0 {
            obj += "void"
        } context.parameter().Length == 1 {
            p = Visit(context.parameter(0)).(Parameter)
            obj += p.type
        }
        ? context.parameter().Length > 1 {
            obj += "( "
            temp = []str{}
            i @ [context.parameter().Length - 1 >= 0] {
                p = Visit(context.parameter(i)).(Parameter)
                temp.add(""p.annotation" "p.type" "p.id" "p.value"")
            }
            i @ [temp.Count - 1 >= 0] {
                ? i == temp.Count - 1 {
                    obj += temp[i]
                } _ {
                    obj += ", "temp[i]""
                }
            }
            obj += " )"
        }
        <- obj
    }

    VisitParameterClauseSelf(context ParameterClauseSelfContext -> v any) {
        p = Parameter{}
        id = Visit(context.id()).(Result)
        p.id = id.text
        p.permission = id.permission
        p.type = Visit(context.typeType()).(str)
        <- p
    }

    VisitParameter(context ParameterContext -> v any) {
        p = Parameter{}
        id = Visit(context.id()).(Result)
        p.id = id.text
        p.permission = id.permission
        ? context.annotationSupport() >< nil {
            p.annotation = Visit(context.annotationSupport()).(str)
        }
        ? context.expression() >< nil {
            p.value = "=" Visit(context.expression()).(Result).text ""
        }
        p.type = Visit(context.typeType()).(str)
        <- p
    }
}
