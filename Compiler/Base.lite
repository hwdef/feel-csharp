"Compiler" {
    "Antlr4/Runtime"
    "Antlr4/Runtime/Misc"
    "System"
    "System/Collections/Generic"

    LiteParser. "Compiler" 
    Compiler_static. "Compiler" 
}

Terminate : ";"
Wrap : "\r\n"

Any : "object"
Int : "int"
Num : "double"
I8 : "sbyte"
I16 : "short"
I32 : "int"
I64 : "long"

U8 : "byte"
U16 : "ushort"
U32 : "uint"
U64 : "ulong"

F32 : "float"
F64 : "double"

Bool : "bool"
T : "true"
F : "false"

Chr : "char"
Str : "string"
Lst : "list"
Set : "hashset"
Dic : "dictionary"
Stk : "stack"

BlockLeft : "{"
BlockRight : "}"

Task : "System.Threading.Tasks.Task"
IEnum : "System.Collections.Generic.IEnumerable"

Result := $ {
    data any
    text str
    permission str
    isVirtual bool
    isDefine bool
}

LiteLangVisitor := me $ {
    LiteParserBaseVisitor[any]

    selfID = ""
    superID = ""
    setID = ""

    AllIDSet = []:str{}
    CurrentIDSet = [^][]:str{}

    has_id : (id str -> v bool) {
        <- me.AllIDSet.contains(id) | me.CurrentIDSet.peek().contains(id)
    }
    add_id : (id str ->) {
        me.CurrentIDSet.peek().add(id)
    }
    add_current_set : (->) {
        item @ CurrentIDSet.peek() {
            AllIDSet.add(item)
        }
        me.CurrentIDSet.push([[]:str]())
    }
    delete_current_set : (->) {
        me.AllIDSet.except_with(me.CurrentIDSet.peek())
        me.CurrentIDSet.pop()
    }
} % () {
    me.CurrentIDSet.push([[]:str]())
}

me LiteLangVisitor % {
    base%VisitProgram : (context ProgramContext -> v any) {
        StatementList = context.statement()
        Result = ""
        item @ StatementList {
            Result += VisitStatement(item)
        }
        <- Result
    }

    base%VisitId : (context IdContext -> v any) {
        r = Result{data = "var"}
        first = Visit(context.GetChild(0)).[Result]
        r.permission = first.permission
        r.text = first.text
        r.isVirtual = first.isVirtual
        ? context.ChildCount >= 2 {
            i @ 1 ..< context.ChildCount {
                other = Visit(context.GetChild(i)).[Result]
                r.text += "_"other.text""
            }
        }

        ? keywords.Exists{t -> t == r.text} {
            r.text = "@"r.text""
        }
        ? r.text == selfID {
            r.text = "this"
        } r.text == superID {
            r.text = "base"
        } r.text == setID {
            r.text = "value"
        }
        <- r
    }

    base%VisitIdItem : (context IdItemContext -> v any) {
        r = Result{data = "var"}
        ? context.typeBasic() >< nil {
            r.permission = "public"
            r.text += context.typeBasic().GetText()
            r.isVirtual = true
        } context.typeAny() >< nil {
            r.permission = "public"
            r.text += context.typeAny().GetText()
            r.isVirtual = true
        } context.linqKeyword() >< nil {
            r.permission = "public"
            r.text += Visit(context.linqKeyword())
            r.isVirtual = true
        } context.op.Type == IDPublic {
            r.permission = "public"
            r.text += context.op.Text
            r.isVirtual = true
        } context.op.Type == IDPrivate {
            r.permission = "protected"
            r.text += context.op.Text
            r.isVirtual = true
        }
        <- r
    }

    base%VisitIdExpression : (context IdExpressionContext -> v any) {
        r = Result{data = "var"}
        ? context.idExprItem().Length > 1 {
            r.text = "("
            i:v @ context.idExprItem() {
                subID = Visit(v).[Result].text
                r.text += ? -> i >< 0 {
                    ", " + subID
                } _ {
                    subID
                }
                ? me.has_id(subID) {
                    r.isDefine = true
                } _ {
                    me.add_id(subID)
                }
            }
            r.text += ")"
        } _ {
            r = Visit(context.idExprItem(0)).[Result]
            ? me.has_id(r.text) {
                r.isDefine = true
            } _ {
                me.add_id(r.text)
            }
        }
        <- r
    }

    base%VisitIdExprItem : (context IdExprItemContext -> v any) {
        <- Visit(context.GetChild(0))
    }

    base%VisitBoolExpr : (context BoolExprContext -> v any) {
        r = Result{}
        ? context.t.Type == TrueLiteral {
            r.data = Bool
            r.text = T
        } context.t.Type == FalseLiteral {
            r.data = Bool
            r.text = F
        }
        <- r
    }

    base%VisitAnnotationSupport : (context AnnotationSupportContext -> v any) {
        <- Visit(context.annotation()).[str]
    }

    base%VisitAnnotation : (context AnnotationContext -> v any) {
        obj = ""
        id = ""
        ? context.id() >< nil {
            id = ""Visit(context.id()).[Result].text":"
        }

        r = Visit(context.annotationList()).[str]
        obj += "[" id "" r "]"
        <- obj
    }

    base%VisitAnnotationList : (context AnnotationListContext -> v any) {
        obj = ""
        i:v @ context.annotationItem() {
            obj += ? -> i > 0 {
                "," Visit(v) ""
            } _ {
                Visit(v)
            }
        }
        <- obj
    }

    base%VisitAnnotationItem : (context AnnotationItemContext -> v any) {
        obj = ""
        obj += Visit(context.id()).[Result].text
        i:v @ context.annotationAssign() {
            obj += ? -> i > 0 {
                "," Visit(v) ""
            } _ {
                "(" Visit(v) ""
            }
        }
        ? context.annotationAssign().Length > 0 {
            obj += ")"
        }
        <- obj
    }

    base%VisitAnnotationAssign : (context AnnotationAssignContext -> v any) {
        obj = ""
        id = ""
        ? context.id() >< nil {
            id = "" Visit(context.id()).[Result].text "="
        }
        r = Visit(context.expression()).[Result]
        obj = id + r.text
        <- obj
    }
}
